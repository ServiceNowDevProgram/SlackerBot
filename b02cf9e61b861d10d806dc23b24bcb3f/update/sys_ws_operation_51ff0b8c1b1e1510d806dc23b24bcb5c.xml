<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>event</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	//gs.info(JSON.stringify(request.body.data));
	var repository = request.body.data.repository;
	var commits = request.body.data.event.commits;
	var log = [];
	if (commits){
		for (var i in commits){
			var rm = new sn_ws.RESTMessageV2();
			rm.setHttpMethod('GET');
			rm.setRequestHeader('accept', 'application/json');
			rm.setEndpoint('https://api.github.com/repos/' + repository + '/commits/' + commits[i].id);
			var r = rm.execute();
			var files = JSON.parse(r.getBody()).files;
			for (var j in files){
				if(files[j].filename.indexOf('Parser/') > -1){
					handleParser(files[j]);
				}
				if(files[j].filename.indexOf('Interaction/') > -1){
					handleInteraction(files[j]);
				}
			}
		}
	}
	response.setStatus(200);
	response.setHeader('Content-Type','text/plain');
	response.getStreamWriter().writeString('logged: ' + JSON.stringify(log));

	function handleParser(file){
		var parsers = new GlideRecord('x_snc_slackerbot_parser');
		parsers.addQuery('active', 'true');
		if (file.status == 'renamed') {
			if (parsers.get('description', file.previous_filename.split('/')[1].split('.')[0])){
				parsers.setValue('description', file.filename.split('/')[1].split('.')[0]);
				parserUpdate(parsers, file.raw_url, 'update');
			}
		} else if (file.status == 'removed'){
			if (parsers.get('description', file.filename.split('/')[1].split('.')[0])){
				parsers.setValue('active', 'false');
				parsers.update();
			}
		} else {
			if (parsers.get('description', file.filename.split('/')[1].split('.')[0])){
				parserUpdate(parsers, file.raw_url, 'update');
			} else {
				parsers.newRecord();
				parsers.setValue('active', 'true');
				parsers.setValue('description', file.filename.split('/')[1].split('.')[0]);
				parserUpdate(parsers, file.raw_url, 'insert');
			}
		}
	}

	function handleInteraction(file){
		var grInteraction = new GlideRecord('x_snc_slackerbot_interaction');
		grInteraction.addQuery('active','true');
		if (file.status == 'renamed') {
			if (grInteraction.get('description', file.previous_filename.split('/')[1].split('.')[0])){
				grInteraction.setValue('description', file.filename.split('/')[1].split('.')[0]);
				interactionUpdate(grInteraction, file.raw_url);
			}
		} else if (file.status == 'removed'){
			if (grInteraction.get('description', file.filename.split('/')[1].split('.')[0])){
				grInteraction.setValue('active', 'false');
				grInteraction.update();
			}
		} else {
			if (grInteraction.get('description', file.filename.split('/')[1].split('.')[0])){
				interactionUpdate(grInteraction, file.raw_url);
			} else {
				grInteraction.newRecord();
				grInteraction.setValue('active', 'true');
				grInteraction.setValue('description', file.filename.split('/')[1].split('.')[0]);
				interactionUpdate(grInteraction, file.raw_url);
			}
		}
	}

	function parserUpdate(gr, raw_url, record_action){
		var rm2 = new sn_ws.RESTMessageV2();
		rm2.setHttpMethod('GET');
		rm2.setRequestHeader('accept', 'plain/text');
		rm2.setEndpoint(raw_url);
		var r2 = rm2.execute();
		var js_raw = r2.getBody();
		var js = js_raw.trim().split('\n');
		if (js[0].trim() != '/*') {
			log.push('line 1 was not /*');
			return;
		}
		var k = 1;
		while (js[k].trim() != '*/'){
			var pair = js[k].split(/:(.*)/);
			if (pair.length < 2){
				log.push('line ' + (k+1) + ' was not a keypair');
				k++;
				continue;
			} else {
				gr.setValue(pair[0], pair[1]);
				k++;
			}
		}
		gr.setValue('script', js_raw);
		if (record_action == 'insert') gr.insert();
		else gr.update();
		log.push('record updated/inserted');
	}

	function interactionUpdate(record, url){
		var interactionMessage = new sn_ws.RESTMessageV2();
		interactionMessage.setHttpMethod('GET');
		interactionMessage.setRequestHeader('accept', 'plain/text');
		interactionMessage.setEndpoint(url);
		var interactionResponse = interactionMessage.execute();
		var scrRaw = interactionResponse.getBody();
		var scrParsed = scrRaw.trim().split('\n');
		if (scrParsed[0].trim() != '/*') {
			log.push('Interaction line 1 was not /*');
			return;
		}
		var k = 1;
		while (scrParsed[k].trim() != '*/'){
			var pair = scrParsed[k].split(/:(.*)/);
			if (pair.length < 2){
				log.push('line ' + (k+1) + ' was not a keypair');
				k++;
				continue;
			} else {
				pair[1] = pair[1].trim();
				if(pair[0] == 'parsers' && pair[1].trim() != ''){
					var arrParsers = pair[1].split(',').map(function(val){return val.trim();});
					var arrParserIds = [];

					for (var l in arrParsers){
						if(arrParsers[l].length > 0){
							var grParser = new GlideRecord('x_snc_slackerbot_parser');
							grParser.addEncodedQuery('active=true^description=' + arrParsers[l]);
							grParser.setLimit(1);
							grParser.query();

							if(grParser.next()){
								arrParserIds.push(grParser.getUniqueValue());
							}
						}
					}

					if(arrParserIds.length > 0){
						record.setValue('related_parsers',arrParserIds.join(','));
					}
				} else {
					record.setValue(pair[0], pair[1]);
				}
				k++;
			}
		}
		record.setValue('script', scrRaw);
		record.update();
		log.push('Interaction record updated/inserted');
	}

})(request, response);]]></operation_script>
        <operation_uri>/api/x_snc_slackerbot/slackerbotgithub</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>false</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>earl.duque</sys_created_by>
        <sys_created_on>2022-09-28 03:26:38</sys_created_on>
        <sys_id>51ff0b8c1b1e1510d806dc23b24bcb5c</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>event</sys_name>
        <sys_package display_value="SlackerBot" source="x_snc_slackerbot">b02cf9e61b861d10d806dc23b24bcb3f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SlackerBot">b02cf9e61b861d10d806dc23b24bcb3f</sys_scope>
        <sys_update_name>sys_ws_operation_51ff0b8c1b1e1510d806dc23b24bcb5c</sys_update_name>
        <sys_updated_by>asteroid</sys_updated_by>
        <sys_updated_on>2024-10-25 11:46:58</sys_updated_on>
        <web_service_definition display_value="SlackerBotGitHub">938f438c1b1e1510d806dc23b24bcb5a</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>51ff0b8c1b1e1510d806dc23b24bcb5c</id>
        <sys_created_by>asteroid</sys_created_by>
        <sys_created_on>2024-10-22 10:04:49</sys_created_on>
        <sys_id>b404789fc3dd165055bdd523e40131f0</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>asteroid</sys_updated_by>
        <sys_updated_on>2024-10-22 10:04:49</sys_updated_on>
        <table>sys_ws_operation</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
