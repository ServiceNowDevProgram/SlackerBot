<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>event</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

	//gs.info(JSON.stringify(request.body.data));
	var repository = request.body.data.repository;
	var commits = request.body.data.event.commits;
	var log = [];
	if (commits){
		for (var i in commits){
			var rm = new sn_ws.RESTMessageV2();
			rm.setHttpMethod('GET');
			rm.setRequestHeader('accept', 'application/json');
			rm.setEndpoint("https://api.github.com/repos/" + repository + "/commits/" + commits[i].id);
			var r = rm.execute();
			var files = JSON.parse(r.getBody()).files;
			for (var j in files){
				var parsers = new GlideRecord("x_snc_slackerbot_parser");
				parsers.addQuery('active', 'true');
				if (files[j].status == 'renamed') {
					if (parsers.get('description', files[j].previous_filename.split("/")[1].split(".")[0])){
						parsers.setValue('description', files[j].filename.split("/")[1].split(".")[0]);
						parserUpdate(parsers, files[j].raw_url, 'update');
					} else continue;
				} else if (files[j].status == "removed"){
					if (parsers.get('description', files[j].filename.split("/")[1].split(".")[0])){
						parsers.setValue('active', 'false');
						parsers.update();
					} else continue;
				} else {
					if (parsers.get('description', files[j].filename.split("/")[1].split(".")[0])){
						parserUpdate(parsers, files[j].raw_url, 'update');
					} else {
						parsers.newRecord();
						parsers.setValue('active', 'true');
						parsers.setValue('description', files[j].filename.split("/")[1].split(".")[0]);
						parserUpdate(parsers, files[j].raw_url, 'insert');
					}
				}
			}
		}
	}
	response.setStatus(200);
	response.setHeader('Content-Type','text/plain');
	response.getStreamWriter().writeString('logged: ' + JSON.stringify(log));

	function parserUpdate(gr, raw_url, record_action){
		var rm2 = new sn_ws.RESTMessageV2();
		rm2.setHttpMethod("GET");
		rm2.setRequestHeader('accept', 'plain/text');
		rm2.setEndpoint(raw_url);
		var r2 = rm2.execute();
		var js_raw = r2.getBody();
		var js = js_raw.trim().split('\n');
		if (js[0].trim() != "/*") {
			log.push("line 1 was not /*");
			return;
		}
		var i = 1;
		while (js[i].trim() != "*/"){
			var pair = js[i].split(/:(.*)/);
			if (pair.length < 2){
				log.push("line " + (i+1) + " was not a keypair");
				i++;
				continue;
			} else {
				gr.setValue(pair[0], pair[1]);
				i++;
			}
		}
		gr.setValue('script', js_raw);
		if (record_action == 'added') gr.insert();
		else gr.update();
		log.push('record updated/inserted');
	}

})(request, response);]]></operation_script>
        <operation_uri>/api/x_snc_slackerbot/slackerbotgithub</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>false</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>earl.duque</sys_created_by>
        <sys_created_on>2022-09-28 03:26:38</sys_created_on>
        <sys_id>51ff0b8c1b1e1510d806dc23b24bcb5c</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>event</sys_name>
        <sys_package display_value="SlackerBot" source="x_snc_slackerbot">b02cf9e61b861d10d806dc23b24bcb3f</sys_package>
        <sys_policy/>
        <sys_scope display_value="SlackerBot">b02cf9e61b861d10d806dc23b24bcb3f</sys_scope>
        <sys_update_name>sys_ws_operation_51ff0b8c1b1e1510d806dc23b24bcb5c</sys_update_name>
        <sys_updated_by>SapphicFire</sys_updated_by>
        <sys_updated_on>2023-10-29 11:40:28</sys_updated_on>
        <web_service_definition display_value="SlackerBotGitHub">938f438c1b1e1510d806dc23b24bcb5a</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
